import telebot
import sqlite3
import threading
import time
from datetime import datetime, timedelta
from config import TOKEN

bot = telebot.TeleBot(TOKEN)

conn = sqlite3.connect("reminders.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS reminders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    datetime TEXT,
    text TEXT,
    sent INTEGER DEFAULT 0
)
""")
conn.commit()

user_temp = {}

@bot.message_handler(commands=["start"])
def start(message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç üëã\n"
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /remind\n"
        "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help\n"
        "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /info"
    )
    bot.reply_to(message, text)

@bot.message_handler(commands=["remind"])
def ask_datetime(message):
    bot.reply_to(
        message, text= "–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –ü–∏—à–∏: HH:MM (–µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è) –∏–ª–∏ DD.MM HH:MM (–µ—Å–ª–∏ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å)\n"
        "–ü—Ä–∏–º–µ—Ä—ã: 18:45, 25.08 09:30"
    )
    bot.register_next_step_handler(message, get_datetime)

@bot.message_handler(commands=["help"])
def help_command(message):
    bot.send_message(message.chat.id, text= '–ü—Ä–∏–≤–µ—Ç! –î–µ—Ä–∂–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∫ –±–æ—Ç—É! üòä\n'
                                     '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /remind (–ø—Ä–∏–º–µ—Ä: /remind 18:45)\n'
                                     '–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /myreminders\n'
                                     '–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /delreminder (–ø—Ä–∏–º–µ—Ä: /delreminder 1)\n'
                                     '–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /clearreminders\n'
    )
    
@bot.message_handler(commands=["info"])
def info_command(message):
    bot.send_message(message.chat.id,text= '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –û–Ω –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ —á—Ç–æ-—Ç–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è üòä\n'
                                    '–ò—Ö—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —Ç—É—Ç: /help\n'
    )

def get_datetime(message):
    user_id = message.from_user.id
    text = message.text.strip()
    remind_dt = None
    now = datetime.now()

    try:
        if len(text) == 5 and ":" in text:
            remind_time = datetime.strptime(text, "%H:%M").time()
            remind_dt = datetime.combine(now.date(), remind_time)
            if remind_dt < now:
                remind_dt += timedelta(days=1)
        else:
            remind_dt = datetime.strptime(text, "%d.%m %H:%M")
            remind_dt = remind_dt.replace(year=now.year)

        remind_dt = remind_dt.replace(second=0, microsecond=0)

    except ValueError:
        bot.reply_to(message, "–ù–µ –ø–æ–Ω—è–ª... –ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM –∏–ª–∏ DD.MM HH:MM, –∏–ª–∏ –∑–∞–Ω–æ–≤–æ /remind üò∂‚Äçüå´Ô∏è")
        return

    user_temp[user_id] = {"datetime": remind_dt}
    bot.reply_to(message, "–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏ –æ —á—ë–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å üëç")
    bot.register_next_step_handler(message, save_reminder)


def save_reminder(message):
    user_id = message.from_user.id
    if user_id not in user_temp:
        bot.reply_to(message, "–ß—ë—Ç —Å–ª–æ–º–∞–ª–æ—Å—å( –ù–∞–ø–∏—à–∏ /remind –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ ü§®")
        return

    remind_dt = user_temp[user_id]["datetime"]
    reminder_text = message.text.strip()

    cursor.execute(
        "INSERT INTO reminders (user_id, datetime, text) VALUES (?, ?, ?)",
        (user_id, remind_dt.strftime("%Y-%m-%d %H:%M"), reminder_text)
    )
    conn.commit()

    bot.reply_to(message, f"–û–∫–µ–π, –∑–∞–ø–æ–º–Ω–∏–ª\n"
                          f"–ù–∞–ø–æ–º–Ω–∏—Ç—å –≤ {remind_dt.strftime('%d.%m %H:%M')}: {reminder_text}")
    del user_temp[user_id]


@bot.message_handler(commands=["myreminders"])
def my_reminders(message):
    user_id = message.from_user.id
    cursor.execute("SELECT id, datetime, text, sent FROM reminders WHERE user_id=? ORDER BY datetime", (user_id,))
    rows = cursor.fetchall()

    if not rows:
        bot.reply_to(message, "–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ... –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç üòí")
        return

    response = "–¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
    for r in rows:
        reminder_id, dt_str, text_rem, sent = r
        status = "–ì–æ—Ç–æ–≤–æ" if sent else "–ñ–¥—ë—Ç"
        dt_human = datetime.strptime(dt_str, "%Y-%m-%d %H:%M").strftime("%d.%m %H:%M")
        response += f"{reminder_id}. [{dt_human}] {text_rem} - {status}\n"

    response += "\n–•–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - /delreminder [id] –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - /clearreminders üò£"
    bot.reply_to(message, response)


@bot.message_handler(commands=["delreminder"])
def delete_reminder(message):
    parts = message.text.split(" ", 1)
    if len(parts) < 2 or not parts[1].isdigit():
        bot.reply_to(message, "–í–≤–µ–¥–∏ ID —Ü–∏—Ñ—Ä–æ–π –ü—Ä–∏–º–µ—Ä: /delreminder 1 üòä")
        return

    reminder_id = int(parts[1])
    user_id = message.from_user.id

    cursor.execute("SELECT id FROM reminders WHERE id=? AND user_id=?", (reminder_id, user_id))
    row = cursor.fetchone()

    if row:
        cursor.execute("DELETE FROM reminders WHERE id=? AND user_id=?", (reminder_id, user_id))
        conn.commit()
        bot.reply_to(message, f"–û–∫–µ–π, —É–¥–∞–ª–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} ü•≤")
    else:
        bot.reply_to(message, "–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ üòï")


@bot.message_handler(commands=["clearreminders"])
def clear_reminders(message):
    user_id = message.from_user.id
    cursor.execute("DELETE FROM reminders WHERE user_id=?", (user_id,))
    conn.commit()
    bot.reply_to(message, "–û—Ç–ª–∏—á–Ω–æ, –≤—Å—ë —É–¥–∞–ª–∏–ª üòå")


def check_reminders():
    while True:
        now = datetime.now().strftime("%Y-%m-%d %H:%M")
        try:
            cursor.execute("SELECT id, user_id, text, datetime FROM reminders WHERE datetime<=? AND sent=0", (now,))
            rows = cursor.fetchall()

            for r in rows:
                reminder_id, user_id, text_rem, dt_str = r
                try:
                    bot.send_message(user_id, f"–ù–∞–ø–æ–º–∏–Ω–∞—é: {text_rem} - {dt_str}")
                    cursor.execute("UPDATE reminders SET sent=1 WHERE id=?", (reminder_id,))
                    conn.commit()
                except Exception as e:
                    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", e)

        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î:", e)

        time.sleep(30)


if __name__ == "__main__":
    threading.Thread(target=check_reminders, daemon=True).start()
    print("–ë–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç üòä")
    bot.polling(none_stop=True)
